
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
model User {
  id               String             @id @default(cuid())
  name             String?
  email            String             @unique
  emailVerified    DateTime?          @map("email_verified")
  password         String?            @db.Text
  image            String?
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  accounts         Account[]
  sessions         Session[]
  hostedMeetings   Meeting[]           @relation("meetingHost")
  participants     MeetingParticipant[]
  assignedActions  ActionItem[]        @relation("assignedActions")

  @@map("users")
}

model MeetingParticipant {
  id         String   @id @default(cuid())
  meetingId  String   @map("meeting_id")
  userId     String   @map("user_id")
  role       String   @default("PARTICIPANT") // e.g., PARTICIPANT, MODERATOR
  joinedAt   DateTime @default(now()) @map("joined_at")
  leftAt     DateTime? @map("left_at")
  
  meeting    Meeting  @relation(fields: [meetingId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  
  @@map("meeting_participants")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope            String?
  id_token         String? @db.Text
  session_state     String?
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Meeting {
  id              String              @id @default(cuid())
  title           String
  link            String?             // For storing meeting links
  audioUrl        String?             @map("audio_url")  // Path to audio file in storage
  transcript      String?             // Full meeting transcript
  summary         String?             // AI-generated summary
  actionItems     Json?               // Array of action items as JSON
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  hostId          String              @map("host_id")
  
  host            User                @relation("meetingHost", fields: [hostId], references: [id])
  participants    MeetingParticipant[]
  audioRecordings AudioRecording[]
  codeGens        CodeGen[]

  @@map("meetings")
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AudioRecording {
  id          String    @id @default(cuid())
  meetingId   String    @unique @map("meeting_id")
  storagePath String    @map("storage_path")
  status      String    @default("UPLOADING") // UPLOADING, PROCESSING, COMPLETED, FAILED
  duration    Int?      // in seconds
  size        Int?      // in bytes
  mimeType    String?   @map("mime_type")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  meeting     Meeting   @relation(fields: [meetingId], references: [id])
  transcript Transcript?
  
  @@map("audio_recordings")
}

model Transcript {
  id               String           @id @default(cuid())
  audioRecordingId String           @unique @map("audio_recording_id")
  text             String           @db.Text
  language         String           @default("en")
  status           String           @default("PROCESSING") // PROCESSING, COMPLETED, FAILED
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  
  audioRecording   AudioRecording   @relation(fields: [audioRecordingId], references: [id])
  summary          MeetingSummary?
  actionItems      ActionItem[]
  codeGenerations  CodeGeneration[]
  
  @@map("transcripts")
}

model MeetingSummary {
  id           String    @id @default(cuid())
  transcriptId String    @unique @map("transcript_id")
  summary      String    @db.Text
  keyPoints    String[]  @default([])
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  transcript   Transcript @relation(fields: [transcriptId], references: [id])
  
  @@map("meeting_summaries")
}

model CodeGen {
  id           String   @id @default(cuid())
  meetingId    String   @map("meeting_id")
  requirement  String   // The requirement text that was used to generate the code
  codeSnippet  String?  @map("code_snippet")  // Generated code
  testCases    String?  @map("test_cases")    // Generated test cases
  docs         String?  // Generated documentation
  createdAt    DateTime @default(now()) @map("created_at")
  
  meeting      Meeting  @relation(fields: [meetingId], references: [id])

  @@map("code_gen")
}

model ActionItem {
  id           String    @id @default(cuid())
  transcriptId String    @map("transcript_id")
  description  String    @db.Text
  dueDate      DateTime?  @map("due_date")
  status       String     @default("TODO") // TODO, IN_PROGRESS, DONE
  priority     String?    @default("MEDIUM") // LOW, MEDIUM, HIGH
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  
  transcript   Transcript @relation(fields: [transcriptId], references: [id])
  assignee     User?      @relation("assignedActions", fields: [assigneeId], references: [id])
  assigneeId   String?    @map("assignee_id")
  
  @@map("action_items")
}

model CodeGeneration {
  id           String     @id @default(cuid())
  code         String     @db.Text
  status       String     @default("GENERATING") // GENERATING, COMPLETED, FAILED
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  transcript   Transcript @relation(fields: [transcriptId], references: [id])
  transcriptId String     @map("transcript_id")
  
  @@map("code_generations")
}
